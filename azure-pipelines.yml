trigger:
- '*'

variables:
  buildConfiguration: 'Release'
  webRepository: 'web'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'secret'

stages:
- stage: 'Build'
  displayName: 'Build and push'
  jobs:  
  - job: 'Build'
    displayName: 'Build job'
    pool:
      vmImage: 'ubuntu-18.04'
    steps:
    - task: Docker@2
      displayName: 'Build and push the image to container registry'
      inputs:
        command: buildAndPush
        buildContext: $(Build.Repository.LocalPath)
        repository: $(webRepository)
        dockerfile: '$(Build.SourcesDirectory)/Tailspin.SpaceGame.Web/Dockerfile'
        containerRegistry: 'Container Registry Connection'
        tags: |
          $(tag)

- stage: 'Dev'
  displayName: 'Deploy to the dev environment'
  dependsOn: Build
  jobs:
  - job: 'Provision_App_Service'
    displayName: 'Provision Azure App Service'
    pool:
      vmImage: 'ubuntu-18.04'
    variables:
    - group: Release
    steps:
    - script: |
        # Exit when any command returns a failure status.
        set -e

        # Write terraform.tfvars.
        echo 'resource_group_location = "'$(ResourceGroupLocation)'"' | tee terraform.tfvars
        echo 'container_registry_url = "'$(RegistryName)'"' | tee -a terraform.tfvars
        echo 'container_registry_username = "'$(RegistryUsername)'"' | tee -a terraform.tfvars
        echo 'container_registry_password = "'$(RegistryPassword)'"' | tee -a terraform.tfvars
        echo 'container_image_name = "'$(webRepository)'"' | tee -a terraform.tfvars
        # Write backend.tfvars.
        echo 'resource_group_name = "tf-storage-rg"' | tee backend.tfvars
        echo 'storage_account_name = "'$(StorageAccountName)'"' | tee -a backend.tfvars
        echo 'container_name = "tfstate"' | tee -a backend.tfvars
        echo 'key = "terraform.tfstate"' | tee -a backend.tfvars

        # Initialize Terraform.
        terraform init -input=false -backend-config="backend.tfvars"
        # Apply the Terraform plan.
        terraform apply -input=false -auto-approve

        # Get the App Service name for the dev environment.
        WebAppNameDev=$(terraform output appservice_name_dev)

        # Write the WebAppNameDev variable to the pipeline.
        echo "##vso[task.setvariable variable=WebAppNameDev;isOutput=true]$WebAppNameDev"
      name: 'RunTerraform'
      displayName: 'Run Terraform'
      env:
        ARM_CLIENT_ID: $(ARM_CLIENT_ID)
        ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
        ARM_TENANT_ID: $(ARM_TENANT_ID)
        ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
  - job: 'Deploy_App_Service'
    displayName: 'Deploy to Azure App Service'
    dependsOn: Provision_App_Service
    variables:
    - group: Release
    - name: WebAppNameDev
      value: $[ dependencies.Provision_App_Service.outputs['RunTerraform.WebAppNameDev'] ]
    pool:
      vmImage: 'ubuntu-18.04'
    steps:
    - task: AzureWebAppContainer@1
      inputs:
       appName: $(WebAppNameDev)
       azureSubscription: 'Resource Manager - Tailspin - Space Game'
       imageName: $(RegistryName)/$(webRepository):$(build.buildId)
  - deployment: 'Deploy_Kubernetes'
    displayName: 'Deploy to Kuberenetes'
    pool:
      vmImage: 'ubuntu-18.04'
    environment: 'spike.default'
    variables:
    - group: Release
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: manifests
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: 'Container Registry Connection'
              kubernetesServiceConnection: 'Kubernetes Cluster Connection'
              namespace: 'default'
          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              kubernetesServiceConnection: 'Kubernetes Cluster Connection'
              namespace: 'default'
              manifests: |
                $(Pipeline.Workspace)/manifests/deployment.yml
                $(Pipeline.Workspace)/manifests/service.yml
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(RegistryName)/$(webRepository):$(build.buildId)
